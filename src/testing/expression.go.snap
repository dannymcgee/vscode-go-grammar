// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expression should work 1`] = `

-> var i int
 | ^^^ storage.type.var.go
 |     ^ variable.other.go
 |       ^^^ support.type.primitive.go
-> var U, V, W float64
 | ^^^ storage.type.var.go
 |     ^ variable.other.go
 |      ^ punctuation.separator.comma.go
 |        ^ variable.other.go
 |         ^ punctuation.separator.comma.go
 |           ^ variable.other.go
 |             ^^^^^^^ support.type.primitive.go
-> var k = 0
 | ^^^ storage.type.var.go
 |     ^ variable.other.go
 |       ^ keyword.operator.assignment.go
 |         ^ constant.numeric.integer.go
-> var x, y float32 = -1, -2
 | ^^^ storage.type.var.go
 |     ^ variable.other.go
 |      ^ punctuation.separator.comma.go
 |        ^ variable.other.go
 |          ^^^^^^^ support.type.primitive.go
 |                  ^ keyword.operator.assignment.go
 |                    ^ keyword.operator.arithmetic.-.go
 |                     ^ constant.numeric.integer.go
 |                      ^ punctuation.separator.comma.go
 |                        ^ keyword.operator.arithmetic.-.go
 |                         ^ constant.numeric.integer.go
-> 
-> var re, im = complexSqrt(-1)
 | ^^^ storage.type.var.go
 |     ^^ variable.other.go
 |       ^ punctuation.separator.comma.go
 |         ^^ variable.other.go
 |            ^ keyword.operator.assignment.go
 |              ^^^^^^^^^^^ entity.name.function.go
 |                          ^ keyword.operator.arithmetic.-.go
 |                           ^ constant.numeric.integer.go
-> var _, found = entries[name]  // map lookup; only interested in "found"
 | ^^^ storage.type.var.go
 |     ^ variable.other.go
 |      ^ punctuation.separator.comma.go
 |        ^^^^^ variable.other.go
 |              ^ keyword.operator.assignment.go
 |                ^^^^^^^ variable.other.go
 |                        ^^^^ variable.other.go
 |                               ^^ punctuation.definition.comment.line.go  comment.line.go
 |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.go
-> 
-> var baz = lorem.Ipsum{a: buf, b: foo, c: bar}
 | ^^^ storage.type.var.go
 |     ^^^ variable.other.go
 |         ^ keyword.operator.assignment.go
 |           ^^^^^ entity.name.type.module.go
 |                ^ punctuation.accessor.go
 |                 ^^^^^ entity.name.type.struct.go
 |                       ^ variable.field.go
 |                        ^ punctuation.separator.key-value.go
 |                          ^^^ variable.other.go
 |                             ^ punctuation.separator.comma.go
 |                               ^ variable.field.go
 |                                ^ punctuation.separator.key-value.go
 |                                  ^^^ variable.other.go
 |                                     ^ punctuation.separator.comma.go
 |                                       ^ variable.field.go
 |                                        ^ punctuation.separator.key-value.go
 |                                          ^^^ variable.other.go
-> 
-> foo, bar := lorem.Ipsum{
 | ^^^ variable.other.go
 |    ^ punctuation.separator.comma.go
 |      ^^^ variable.other.go
 |          ^ punctuation.separator.key-value.go
 |           ^ keyword.operator.assignment.go
 |             ^^^^^ entity.name.type.module.go
 |                  ^ punctuation.accessor.go
 |                   ^^^^^ entity.name.type.struct.go
->     a: buf,
 |     ^ variable.field.go
 |      ^ punctuation.separator.key-value.go
 |        ^^^ variable.other.go
 |           ^ punctuation.separator.comma.go
->     b: foo,
 |     ^ variable.field.go
 |      ^ punctuation.separator.key-value.go
 |        ^^^ variable.other.go
 |           ^ punctuation.separator.comma.go
->     c: bar,
 |     ^ variable.field.go
 |      ^ punctuation.separator.key-value.go
 |        ^^^ variable.other.go
 |           ^ punctuation.separator.comma.go
->     d: func(foo, bar string) bool {
 |     ^ variable.field.go
 |      ^ punctuation.separator.key-value.go
 |        ^^^^ storage.type.func.go
 |            ^ punctuation.definition.parameters.begin.go
 |             ^^^ variable.other.go
 |                ^ punctuation.separator.comma.go
 |                  ^^^ variable.other.go
 |                      ^^^^^^ support.type.primitive.go
 |                            ^ punctuation.definition.parameters.end.go
 |                              ^^^^ support.type.primitive.go
 |                                   ^ punctuation.definition.block.begin.go
->         // Lorem ipsum dolor sit amet
 |         ^^ punctuation.definition.comment.line.go  comment.line.go
 |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.line.go
->     },
 |      ^ punctuation.separator.comma.go
->     more: 12345,
 |     ^^^^ variable.field.go
 |         ^ punctuation.separator.key-value.go
 |           ^^^^^ constant.numeric.integer.go
 |                ^ punctuation.separator.comma.go
->     fields: "foo",
 |     ^^^^^^ variable.field.go
 |           ^ punctuation.separator.key-value.go
 |             ^ punctuation.definition.string.begin.go  string.interpreted.go
 |              ^^^ string.interpreted.go
 |                 ^ punctuation.definition.string.end.go  string.interpreted.go
 |                  ^ punctuation.separator.comma.go
->     after: func() bool,
 |     ^^^^^ variable.field.go
 |          ^ punctuation.separator.key-value.go
 |            ^^^^ storage.type.func.go
 |                ^ punctuation.definition.parameters.begin.go
 |                 ^ punctuation.definition.parameters.end.go
 |                   ^^^^ support.type.primitive.go
->     fn: "baz"
 |     ^^ variable.field.go
 |       ^ punctuation.separator.key-value.go
 |         ^ punctuation.definition.string.begin.go  string.interpreted.go
 |          ^^^ string.interpreted.go
 |             ^ punctuation.definition.string.end.go  string.interpreted.go
-> }
-> 
`;
