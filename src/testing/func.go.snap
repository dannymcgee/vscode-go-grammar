// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`func should work 1`] = `

-> func lorem() {}
 | ^^^^ storage.type.func.go
 |      ^^^^^ entity.name.function.go
 |           ^ punctuation.definition.parameters.begin.go
 |            ^ punctuation.definition.parameters.end.go
 |              ^ punctuation.definition.block.begin.go
-> 
-> func lorem(x int) int {}
 | ^^^^ storage.type.func.go
 |      ^^^^^ entity.name.function.go
 |           ^ punctuation.definition.parameters.begin.go
 |            ^ variable.other.go
 |              ^^^ support.type.primitive.go
 |                 ^ punctuation.definition.parameters.end.go
 |                   ^^^ support.type.primitive.go
 |                       ^ punctuation.definition.block.begin.go
-> 
-> func lorem(a, b int, z float32) bool {}
 | ^^^^ storage.type.func.go
 |      ^^^^^ entity.name.function.go
 |           ^ punctuation.definition.parameters.begin.go
 |            ^ variable.other.go
 |             ^ punctuation.separator.comma.go
 |               ^ variable.other.go
 |                 ^^^ support.type.primitive.go
 |                    ^ punctuation.separator.comma.go
 |                      ^ variable.other.go
 |                        ^^^^^^^ support.type.primitive.go
 |                               ^ punctuation.definition.parameters.end.go
 |                                 ^^^^ support.type.primitive.go
 |                                      ^ punctuation.definition.block.begin.go
-> 
-> func lorem(a, b string) (string, error) {}
 | ^^^^ storage.type.func.go
 |      ^^^^^ entity.name.function.go
 |           ^ punctuation.definition.parameters.begin.go
 |            ^ variable.other.go
 |             ^ punctuation.separator.comma.go
 |               ^ variable.other.go
 |                 ^^^^^^ support.type.primitive.go
 |                       ^ punctuation.definition.parameters.end.go
 |                         ^ punctuation.definition.parameters.begin.go
 |                          ^^^^^^ support.type.primitive.go
 |                                ^ punctuation.separator.comma.go
 |                                  ^^^^^ support.type.primitive.go
 |                                       ^ punctuation.definition.parameters.end.go
 |                                         ^ punctuation.definition.block.begin.go
-> 
-> func lorem(foo string, bar int, baz ...*lorem.ipsum) Dolor {}
 | ^^^^ storage.type.func.go
 |      ^^^^^ entity.name.function.go
 |           ^ punctuation.definition.parameters.begin.go
 |            ^^^ variable.other.go
 |                ^^^^^^ support.type.primitive.go
 |                      ^ punctuation.separator.comma.go
 |                        ^^^ variable.other.go
 |                            ^^^ support.type.primitive.go
 |                               ^ punctuation.separator.comma.go
 |                                 ^^^ variable.other.go
 |                                     ^^^ keyword.operator.variadic.go
 |                                        ^ keyword.operator..go
 |                                         ^^^^^ entity.name.type.module.go
 |                                              ^ punctuation.accessor.go
 |                                               ^^^^^ entity.name.type.go
 |                                                    ^ punctuation.definition.parameters.end.go
 |                                                      ^^^^^ entity.name.type.go
 |                                                            ^ punctuation.definition.block.begin.go
-> 
-> func lorem(foo string, bar int, baz ...*lorem.ipsum) (x bool, err error) {}
 | ^^^^ storage.type.func.go
 |      ^^^^^ entity.name.function.go
 |           ^ punctuation.definition.parameters.begin.go
 |            ^^^ variable.other.go
 |                ^^^^^^ support.type.primitive.go
 |                      ^ punctuation.separator.comma.go
 |                        ^^^ variable.other.go
 |                            ^^^ support.type.primitive.go
 |                               ^ punctuation.separator.comma.go
 |                                 ^^^ variable.other.go
 |                                     ^^^ keyword.operator.variadic.go
 |                                        ^ keyword.operator..go
 |                                         ^^^^^ entity.name.type.module.go
 |                                              ^ punctuation.accessor.go
 |                                               ^^^^^ entity.name.type.go
 |                                                    ^ punctuation.definition.parameters.end.go
 |                                                      ^ punctuation.definition.parameters.begin.go
 |                                                       ^ variable.other.go
 |                                                         ^^^^ support.type.primitive.go
 |                                                             ^ punctuation.separator.comma.go
 |                                                               ^^^ variable.other.go
 |                                                                   ^^^^^ support.type.primitive.go
 |                                                                        ^ punctuation.definition.parameters.end.go
 |                                                                          ^ punctuation.definition.block.begin.go
-> 
-> func min(x int, y int) int {}
 | ^^^^ storage.type.func.go
 |      ^^^ entity.name.function.go
 |         ^ punctuation.definition.parameters.begin.go
 |          ^ variable.other.go
 |            ^^^ support.type.primitive.go
 |               ^ punctuation.separator.comma.go
 |                 ^ variable.other.go
 |                   ^^^ support.type.primitive.go
 |                      ^ punctuation.definition.parameters.end.go
 |                        ^^^ support.type.primitive.go
 |                            ^ punctuation.definition.block.begin.go
-> 
-> func (p *Point) Length() float64 {}
 | ^^^^ storage.type.func.go
 |      ^ punctuation.definition.parameters.begin.go
 |       ^ variable.other.go
 |         ^ keyword.operator..go
 |          ^^^^^ entity.name.type.go
 |               ^ punctuation.definition.parameters.end.go
 |                 ^^^^^^ entity.name.function.go
 |                       ^ punctuation.definition.parameters.begin.go
 |                        ^ punctuation.definition.parameters.end.go
 |                          ^^^^^^^ support.type.primitive.go
 |                                  ^ punctuation.definition.block.begin.go
-> 
-> func (p *Point) Scale(factor float64) {}
 | ^^^^ storage.type.func.go
 |      ^ punctuation.definition.parameters.begin.go
 |       ^ variable.other.go
 |         ^ keyword.operator..go
 |          ^^^^^ entity.name.type.go
 |               ^ punctuation.definition.parameters.end.go
 |                 ^^^^^ entity.name.function.go
 |                      ^ punctuation.definition.parameters.begin.go
 |                       ^^^^^^ variable.other.go
 |                              ^^^^^^^ support.type.primitive.go
 |                                     ^ punctuation.definition.parameters.end.go
 |                                       ^ punctuation.definition.block.begin.go
-> 
-> func(a, b int, z float64) bool {}
 | ^^^^ storage.type.func.go
 |     ^ punctuation.definition.parameters.begin.go
 |      ^ variable.other.go
 |       ^ punctuation.separator.comma.go
 |         ^ variable.other.go
 |           ^^^ support.type.primitive.go
 |              ^ punctuation.separator.comma.go
 |                ^ variable.other.go
 |                  ^^^^^^^ support.type.primitive.go
 |                         ^ punctuation.definition.parameters.end.go
 |                           ^^^^ support.type.primitive.go
 |                                ^ punctuation.definition.block.begin.go
-> 
-> f := func(x, y int) int {}
 | ^ entity.name.function.go
 |   ^^ keyword.operator.assignment.go
 |      ^^^^ storage.type.func.go
 |          ^ punctuation.definition.parameters.begin.go
 |           ^ variable.other.go
 |            ^ punctuation.separator.comma.go
 |              ^ variable.other.go
 |                ^^^ support.type.primitive.go
 |                   ^ punctuation.definition.parameters.end.go
 |                     ^^^ support.type.primitive.go
 |                         ^ punctuation.definition.block.begin.go
-> 
-> func(ch chan int) { ch <- ACK }(replyChan)
 | ^^^^ storage.type.func.go
 |     ^ punctuation.definition.parameters.begin.go
 |      ^^ variable.other.go
 |         ^^^^ storage.type.chan.go
 |              ^^^ support.type.primitive.go
 |                 ^ punctuation.definition.parameters.end.go
 |                   ^ punctuation.definition.block.begin.go
 |                     ^^ variable.other.go
 |                        ^^ keyword.operator.arrow.go
 |                           ^^^ variable.other.go
 |                                 ^^^^^^^^^ variable.other.go
-> 
-> func flushICache(begin, end uintptr) // implemented externally
 | ^^^^ storage.type.func.go
 |      ^^^^^^^^^^^ entity.name.function.go
 |                 ^ punctuation.definition.parameters.begin.go
 |                  ^^^^^ variable.other.go
 |                       ^ punctuation.separator.comma.go
 |                         ^^^ variable.other.go
 |                             ^^^^^^^ support.type.primitive.go
 |                                    ^ punctuation.definition.parameters.end.go
 |                                      ^^ punctuation.definition.comment.line.go  comment.line.go
 |                                        ^^^^^^^^^^^^^^^^^^^^^^^ comment.line.go
-> 
`;
